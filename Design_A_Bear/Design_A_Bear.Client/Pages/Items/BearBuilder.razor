@page "/Bear-Builder"
@using Design_A_Bear.Models
@using Design_A_Bear.Services
@rendermode InteractiveAuto
@inject IItemService ItemService
@inject IImageService ImageService
@inject PersistentComponentState ApplicationState
@inject IBasketService BasketService
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="w-100 mt-2 bg-primary rounded" style="height:100px">
    <h3 class="fw-bold fs-1 mt-2 text-light ps-3 pt-3">Build your own bear!</h3>
</div>
<div class="d-flex">
    <div class="d-flex flex-column mt-2" style="width:70vw;">
        <div class="d-flex">
            <div class="rounded-circle border border-2 border-success d-flex mt-2" style="width:50px;height:50px;background-color:#D1FFBD;">
                <p class="fw-bold fs-1 align-self-center pt-3 ps-2">@builderState</p>
            </div>
            <p class="font-bold ps-3 fs-1 fw-bold">@bearStateString</p>
            @if(builderState != 1)
            {
                <button class="btn btn-secondary ms-4" @onclick="GoBackOneState" style="height:50px;width:100px;">back</button>
            }

        </div>
        @if (builderState == 1)
        {
            <div class="row">
                @foreach (var bear in Bears)
                {
                    <div class="col-4 d-flex flex-column">
                        <img src="@ImageService.ConvertBase64ToImage(bear.ImgBase64, bear.ImageType)" class="rounded m-2"/>
                        <hr/>
                        <p class="fw-bold fs-4">@bear.Name</p>
                        <button class="btn btn-primary" @onclick="() => SelectAndChangeState(bear,'B',2)">Select</button>
                    </div>
                }
            </div>
        }
        @if (builderState == 2)
        {
            <div class="row">
                @foreach (var cloths in Clothing)
                {
                    <div class="col-4 d-flex flex-column">
                        <img src="@ImageService.ConvertBase64ToImage(cloths.ImgBase64, cloths.ImageType)" class="rounded m-2" />
                        <hr/>
                        <p class="fw-bold fs-4">@cloths.Name</p>
                        <button class="btn btn-primary" @onclick="() => SelectAndChangeState(cloths,'C',3)">Select</button>
                    </div>
                }
            </div>
        }
        @if (builderState == 3)
        {
            <div class="row" style="max-width:67vw">
                <div class="d-flex">
                    <h1>Your chosen items</h1>
                    <button class="btn btn-primary ms-4 fw-bold" @onclick="AddItemsToBasket" style="width:200px;">Finish</button>
                </div>
                <div class="d-flex">
                    <div class="col-4 d-flex flex-column me-3">
                        <img src="@ImageService.ConvertBase64ToImage(selectedBear.ImgBase64, selectedBear.ImageType)" class="rounded m-2" />
                        <hr/>
                        <p class="fw-bold fs-4">@selectedBear.Name</p>
                        <button class="btn btn-primary">Select a different bear</button>
                    </div>
                    <div class="col-4 d-flex flex-column">
                        <img src="@ImageService.ConvertBase64ToImage(selectedClothing.ImgBase64, selectedClothing.ImageType)" class="rounded m-2" />
                        <hr/>
                        <p class="fw-bold fs-4">@selectedClothing.Name</p>
                        <button class="btn btn-primary">Select a different clothing</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="d-none d-md-inline" style="width:29vw;">
        <div class="width-100 bg-primary rounded mt-2 pb-2">
            <p class="text-center fw-bold fs-2 text-light">My furry friend</p>
            <div class="d-flex flex-column">
                <div class="d-flex">
                    <div class="rounded-circle border border-2 border-success d-flex mt-2 ms-5" style="width:50px;height:50px;background-color:#D1FFBD;">
                        <p class="fw-bold fs-4 align-self-center pt-3 ps-3">1</p>
                    </div>
                    <p class="fs-2 fw-bold mt-2 ps-3">Choose a bear!</p>
                </div>
                @if (selectedBear.Id != 0)
                {
                    <div>
                        <div class="col-4 d-flex flex-column ms-5">
                            <img src="@ImageService.ConvertBase64ToImage(selectedBear.ImgBase64, selectedBear.ImageType)" class="rounded m-2" />
                            <hr/>
                            <p class="fw-bold fs-4 text-light">@selectedBear.Name</p>
                        </div>

                    </div>
                }
                <hr/>
                <div class="d-flex">
                    <div class="rounded-circle border border-2 border-success d-flex mt-2 ms-5" style="width:50px;height:50px;background-color:#D1FFBD;">
                        <p class="fw-bold fs-4 align-self-center pt-3 ps-3">2</p>
                    </div>
                    <p class="fs-2 fw-bold mt-2 ps-3">Choose clothing!</p>
                </div>
                @if (selectedClothing.Id != 0)
                {
                    <div>
                        <div class="col-4 d-flex flex-column ms-5">
                            <img src="@ImageService.ConvertBase64ToImage(selectedClothing.ImgBase64, selectedClothing.ImageType)" class="rounded m-2" />
                            <hr/>
                            <p class="fw-bold fs-4 text-light">@selectedClothing.Name</p>
                        </div>
                    </div>
                }
                <hr/>
                <div class="d-flex">
                    <div class="rounded-circle border border-2 border-success d-flex mt-2 ms-5" style="width:50px;height:50px;background-color:#D1FFBD;">
                        <p class="fw-bold fs-4 align-self-center pt-3 ps-3">3</p>
                    </div>
                    <p class="fs-2 fw-bold mt-2 ps-3">Add to cart!</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PersistingComponentStateSubscription persistingSubscription;

    private string userId = "";
    private int builderState = 1;
    private string bearStateString = "Choose a bear!";
    private List<Item> Bears = new List<Item>();
    private List<Item> Clothing = new List<Item>();

    private Item selectedBear = new Item();
    private Item selectedClothing = new Item();

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistBears);
        if (!ApplicationState.TryTakeFromJson<List<Item>>(nameof(Bears),out var restoredBears))
        {
            Bears = await ItemService.GetItemsByCategory("Teddy Bear");
        }
        else
        { 
            Bears = restoredBears;
        }
        
        Clothing = await ItemService.GetItemsByCategory("Clothing");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }
    private Task PersistBears()
    {
        // Save state
        ApplicationState.PersistAsJson(nameof(Bears), Bears);

        return Task.CompletedTask;
    }
    private void SetState(int state)
    {
        builderState = state;
        switch (state)
        {
            case 1:
                bearStateString = "Choose a bear!";
                break;
            case 2:
                bearStateString = "Choose clothing!";
                break;
            case 3:
                bearStateString = "Add to cart!";
                break;
        }
    }
    private void SelectBear(Item item)
    {
        selectedBear = item;
        SetState(2);
    }
    private void SelectClothing(Item item)
    {
        selectedClothing = item;
        SetState(3);
    }

    private void SelectAndChangeState(Item item,char type, int state)
    {
        if (type == 'B')
        {
            SelectBear(item);
        }
        else
        {
            SelectClothing(item);
        }
        SetState(state);
    }

    private void GoBackOneState()
    {
        builderState--;
    }

    private async void AddItemsToBasket()
    {
        BasketItem Bear = new BasketItem
        {
            ItemId = selectedBear.Id,
            Item = selectedBear,
            Quantity = 1,
            UserId = userId
        };
        BasketItem Clothing = new BasketItem
        {
            ItemId = selectedClothing.Id,
            Item = selectedClothing,
            Quantity = 1,
            UserId = userId
        };
        var checkItemBear = await BasketService.IsInBasket(Bear.ItemId, Bear.UserId);
        if (checkItemBear.Id == 0)
        {
            await BasketService.AddToBasket(Bear);
        }
        var checkItemClothing = await BasketService.IsInBasket(Clothing.ItemId, Clothing.UserId);
        if (checkItemClothing.Id == 0)
        {
            await BasketService.AddToBasket(Clothing);
        }
        NavigationManager.NavigateTo("/Basket");
    }
}
