@inject IItemService ItemService
@inject IFavoriteService IFavoriteService
@inject IImageService ImageService
@inject IBasketService BasketService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Design_A_Bear.Models
@using Design_A_Bear.Services
@using System.Security.Claims
@rendermode InteractiveAuto
@page "/ViewProduct/{Id:int}"

<a class="btn btn-primary btn-lg mt-5" href="/browse">Back</a>

@if(item != null)
{
    <div class="row mt-5 rounded justify-content-center">
       <div class="col-md-3 col-12">
           <img class="img-fluid rounded" style="max-width:300px;" src="@ImageService.ConvertBase64ToImage(item.ImgBase64)" />
       </div>
       <div class="col-md-6 col-12 ps-5">
           <h1 class="fw-bold">@item.Name</h1>
           <hr />
           <h5 style="max-width:500px;">@item.Description</h5>
           <h3 class="fw-bold mt-5">£@item.Price.ToString("F2")</h3>
           <div class="d-flex pb-3">
               <select class="me-3" @bind="Quantity">
                   @for (int i = 1; i <= 10; i++)
                   {
                       <option value="@i">@i</option>
                   }
               </select>
                <button class="btn btn-primary btn-lg" @onclick="AddToBasket"><i class="bi bi-cart-plus-fill"></i> Add To Basket</button>
           </div>
           @if (!String.IsNullOrEmpty(userId))
           {
                <button class="btn btn-danger btn-lg mt-md-0" @onclick="Wishlist"><i class="bi bi-heart-fill"></i>@(isFavorited ? " Already in wishlist" : " Add to wishlist")</button>
           }
           else
           {
                <button class="btn btn-danger btn-lg mt-md-0"><i class="bi bi-heart-fill"></i> Login to add to wishlist</button>
           }
       </div>
   </div>
}

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    private int Quantity = 1;
    private Item item = new Item();
    private bool isFavorited = false;
    private string userId = "";
    protected override async Task OnInitializedAsync()
    {
        if(Id != 0)
        {
            item = await ItemService.GetItemById(Id);
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if(userId != null)
            {
                isFavorited = await IFavoriteService.IsInFavorites(userId, Id);
            }
        }
    }

    private async void Wishlist()
    {
        if (isFavorited)
        {
            isFavorited = false;
            await IFavoriteService.RemoveFromFavorites(userId,Id);
        }
        else
        {
            isFavorited = true;
            var favoriteItem = new FavoriteItems()
            {
                ItemId = item.Id,
                Item = item,
                UserId = userId
            };
            await IFavoriteService.AddToFavorites(favoriteItem);
        }
        StateHasChanged();
    }
    private async void AddToBasket()
    {
        var basketItem = new BasketItem()
        {
            ItemId = item.Id,
            Item = item,
            UserId = userId,
            Quantity = this.Quantity,

        };
        var checkItem = await BasketService.IsInBasket(basketItem.ItemId, basketItem.UserId);
        if (checkItem.Id == 0)
        {
            await BasketService.AddToBasket(basketItem);
        }
    }
}
