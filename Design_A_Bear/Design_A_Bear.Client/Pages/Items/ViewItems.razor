@page "/viewitems"
@using Design_A_Bear.Models
@using Design_A_Bear.Services
@using Microsoft.AspNetCore.Authorization
@using Design_A_Bear.Client.Pages.components
@inject IImageService ImageService
@inject NavigationManager NavigationManager
@inject IItemService ItemService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [Authorize(Roles ="Admin")]

<div class="d-flex mt-4 mb-4">
    <h3 class=" fw-bold ">View all Items</h3>
    <div class="ms-3">
        <a href="/upsertitem" class="btn btn-primary fw-bold">Add Products</a>
    </div>
</div>
@if(items.Count == 0)
{
    <p class="fw-bold">Loading...</p>
}
else
{
    <table class="table table-striped table-hover">

        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Image</th>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td scope="row">@item.Id</td>
                    <td><img src="@ImageService.ConvertBase64ToImage(item.ImgBase64)" alt="@item.Name image" style="width: 100px; height: 100px;" /></td>
                    <td>@item.Name</td>
                    <td>£@item.Price.ToString("F2")</td>
                    <td>
                        <div>
                            <a href="/upsertItem/@item.Id" class="btn btn-primary">Edit</a>
                            <button class="btn btn-danger" onclick="@(()=>DeleteItem(item.Id))">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (showDeleteItem)
{
    <DeleteItem item="@itemToDelete" CloseDeleteItem="@(CloseDeleteItem)" CloseAndDeleteItem="@(CloseAndDeleteItem)" />
}

@code {
    private List<Item> items = new List<Item>();
    private bool showDeleteItem = false;
    private Item itemToDelete = new Item();

    protected override async Task OnInitializedAsync()
    {
        items = await ItemService.GetAllItems();
    }
    private void EditItem(int id)
    {
        NavigationManager.NavigateTo($"/upsert/{id}");
    }

    private void DeleteItem(int itemId)
    {
        itemToDelete = items.FirstOrDefault(x => x.Id == itemId);
        showDeleteItem = true;
        StateHasChanged();
    }
    private void CloseDeleteItem()
    {
        showDeleteItem = false;
        StateHasChanged();
    }
    private void CloseAndDeleteItem()
    {
        showDeleteItem = false;
        items.Remove(itemToDelete);
        StateHasChanged();
    }
}
