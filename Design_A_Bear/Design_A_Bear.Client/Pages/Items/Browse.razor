@page "/browse"
@using Design_A_Bear.Services
@using Design_A_Bear.Models
@using Design_A_Bear.Client.Pages.components
@inject IItemService ItemService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>Browse Products</PageTitle>

<h3 class="fw-bold mt-4 fs-1">Browse Products</h3>
<div class="row">
    <div class="col-md-3 col-12">
        <InputText type="text" class="form-control border border-light-subtle border-3 " placeholder="Search for product..." TValue="string" Value="@search" ValueChanged="input =>Search(input)" ValueExpression="@(()=>search)" />
    </div>
</div>
<div class="mt-1">
    <div class="btn btn-primary" @onclick="Sort">Sort @(sortType == SortType.Desc ? new MarkupString("<i class='bi bi-arrow-down'></i>") : new MarkupString("<i class='bi bi-arrow-up'></i>"))</div>
</div>
@if(items.Count != 0)
{
    <div class="d-flex flex-md-row flex-column mt-5 flex-wrap">
        @foreach (var item in FilteredItems)
        {
            <div class="col-md-4 col-lg-3 col-12 mt-5 mt-md-10" @key="item.Id">
                <ItemCard Item="@item" />
            </div>
        }
    </div>
}
else
{
    <p class="fs-5">loading products...</p>
}

@code {
    List<Item> items = new();
    List<Item> FilteredItems = new();

    private string ?search;

    protected override async Task OnInitializedAsync()
    {
        items = await ItemService.GetAllItems();
        FilteredItems = items;
        search = "";
    }

    void Search(string input)
    {
        search = input;
        FilteredItems = items.Where(x => x.Name.ToLower().Contains(search.ToLower())).ToList();
    }

    enum SortType
    {
        Asc,
        Desc
    }
    SortType sortType = SortType.Desc;

    void Sort()
    {
        if (sortType == SortType.Asc)
        {
            sortType = SortType.Desc;
        }
        else
        {
            sortType = SortType.Asc;
        }

        if (sortType == SortType.Asc)
        {
            FilteredItems = FilteredItems.OrderBy(x => x.Price).ToList();
        }
        else
        {
            FilteredItems = FilteredItems.OrderByDescending(x => x.Price).ToList();
        }
    }
}
