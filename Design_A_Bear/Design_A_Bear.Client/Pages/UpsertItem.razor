@page "/upsertitem"
@page "/upsertitem/{Id:int}"
@using Design_A_Bear.Models
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveAuto
@attribute [Authorize]

<div class="container mt-5 primaryBg rounded p-3">
    @if(Id == 0)
    {
        <h3 class="fw-bold text-light">Add new Product</h3>
    }
    else
    {
        <h3 class="fw-bold text-light">Edit Product</h3>
    }
    <div class="row">
        <div class="row mt-3 col-md-6 col-12">
            <EditForm FormName="addItem" Model="item" OnValidSubmit="HandleSubmit" class="col-12">
                <DataAnnotationsValidator />

                <div class="form-floating mb-3">
                    <InputFile class="form-control" placeholder="name@example.com" accept="image/png" OnChange="HandleFileChange"></InputFile>
                        <label for="floatingInput">Product Image</label>
                        <ValidationMessage For="() => item.ImgBase64" />
                    </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="item.Name" class="form-control" placeholder="name@example.com">@item.Name</InputText>
                    <label for="floatingInput">Product Name</label>
                    <ValidationMessage For="() => item.Name" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="item.Description" class="form-control" placeholder="name@example.com" style="min-height:200px;">@item.Description</InputTextArea>
                    <label for="floatingInput">Product Description</label>
                    <ValidationMessage For="() => item.Description" />
                </div>
                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="item.Price" class="form-control" placeholder="name@example.com">@item.Price</InputNumber>
                    <label for="floatingInput">Product Price</label>
                    <ValidationMessage For="() => item.Price" />
                </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="item.Category" class="form-control" placeholder="name@example.com">
                            <option value="" selected disabled>Select Category</option>
                            <option value="Teddy Bear">Teddy Bear</option>
                            <option value="Clothing">Clothing</option>
                        </InputSelect>
                        <label for="floatingInput">Product Category</label>
                        <ValidationMessage For="() => item.Category" />
                    </div>
           
                <button type="submit" class="btn btn-light">Add Product</button>
            </EditForm>
        </div>
            <div class="mt-3 col-md-6 col-12">
                @if (!string.IsNullOrEmpty(imageSource))
                {
                <img src="@imageSource" alt="Image preview" class="img-fluid rounded" />
            }
            else
            {
               <img src="https://via.placeholder.com/500" alt="Image preview" class="img-fluid rounded" />
            }
        </div>
    </div>




</div>

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    private Item item = new Item();

    private void HandleSubmit()
    {

    }
    protected override async Task OnInitializedAsync()
    {

    }
    private string base64String = string.Empty;
    private string imageSource = string.Empty;


    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            var buffer = new byte[file.Size];
            using (var stream = file.OpenReadStream())
            {
                await stream.ReadAsync(buffer, 0, buffer.Length);
            }
            base64String = Convert.ToBase64String(buffer);

            
            imageSource = $"data:image/*;base64,{base64String}";
            item.ImgBase64 = base64String;
        }
    }
}
