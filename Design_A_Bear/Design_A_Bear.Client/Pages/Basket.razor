@page "/Basket"
@using Design_A_Bear.Services
@using Design_A_Bear.Models
@using System.Security.Claims
@inject IBasketService BasketService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IImageService ImageService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<div class="container">
    <h1 class="pt-2">Basket</h1>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Product</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total Price</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in basketItems)
            {
                <tr>
                    <th scope="row">
                            <img src="@ImageService.ConvertBase64ToImage(item.Item.ImgBase64)" style="width:80px;height:50px" /> @item.Item.Name
                    </th>
                    <td>
                        £@item.Item.Price.ToString("F2")
                    </td>
                    <td>
                        <select @bind="item.Quantity">
                            @for (int i = 1; i <= 10; i++)
                            {
                                <option value="@i" selected="@(item.Quantity == i)">@i</option>
                            }
                        </select>
                    </td>
                        <td>£@((item.Item.Price * item.Quantity).ToString("F2"))</td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteItem(item.ItemId)">Delete</button></td>

                </tr>
            }
        </tbody>
    </table>
    <div>
        <h3>Total Price: <strong>£360.00 </strong></h3>
        <button class="btn btn-primary fs-3">Checkout</button>
    </div>
</div>

@code {
    private List<BasketItem>basketItems = new();
    private string userId = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!String.IsNullOrEmpty(userId))
        {
            basketItems = await BasketService.GetAllBasketItems(userId);
        }
    }
    private async void DeleteItem(int itemId)
    {
        await BasketService.RemoveFromBasket(itemId, userId);
        basketItems = basketItems.Where(x => x.ItemId != itemId).ToList();
        StateHasChanged();
    }
}

